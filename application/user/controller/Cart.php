<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/5/8
 * Time: 17:00
 */
namespace app\user\controller;

use app\common\model\Article;
use app\common\model\UserCart;
use app\common\model\UserAddress;
use app\common\model\UserOrder;
use think\Request;
use app\common\model\User as UserModel;

class Cart extends Base{
    public $article;
    public $userCart;
    public $userAddress;
    public $user;
    public $userOrder;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->article=new Article();
        $this->userCart=new UserCart();
        $this->userAddress=new UserAddress();
        $this->user=new UserModel();
        $this->userOrder=new UserOrder();


    }
    //购物车
    public function index($id=''){
        $result=$this->userCart->alias('a')->join('article b','a.goods_id=b.id')->where('a.user_id',$this->id)->where('a.is_order',0)->field('b.*,a.is_buy')->order('add_time')->paginate(5);
        $this->assign('result',$result);
        return $this->fetch('cart-list');
    }
    //移除购物车
    public function remove($id){
        $this->userCart->destroy(['goods_id'=>$id,'user_id'=>$this->id]);
        return 'ok';
    }
    //标记为要买
    public function isBuy($id,$flag){
        $this->userCart->where(['goods_id'=>$id,'user_id'=>$this->id])->setField('is_buy',$flag);
        return 'ok';
    }
    //统计要买商品的总金额
    public function isBuyMoney(){
        //不能计算已经支付过的商品
        $sum=$this->userCart->alias('a')->join('article b','a.goods_id=b.id')->where('a.user_id',$this->id)->where('a.is_buy',1)->where('a.is_order',0)->sum('b.jmoney');
        return $sum;
    }
    //购物车订单提交
    public function orderSubmit(){
        //该用户的所有地址
        $address=$this->userAddress->where('user_id',$this->id)->select();
        // 该用户默认地址
        $info=$this->user->where('id',$this->id)->field('def_address_id')->find();
        //所有要购买的商品列表
        $result=$this->userCart->alias('a')->join('article b','a.goods_id=b.id')->where('a.user_id',$this->id)->where('a.is_buy',1)->where('a.is_order',0)->select();

        $this->assign('addressId',$info['def_address_id']);
        $this->assign('address',$address);
        $this->assign('result',$result);
        return $this->fetch('order-sub');
    }
    //支付页面 $id 是地址id
    public function pay($id){

        //TODO 将购买的商品，生成一条商品订单号

        //购物车里商品，被提交到订单系统中了
        $this->userCart->where('is_buy',1)->setField('is_order',1);

        //一次购买多个商品，则商品订单号相同
        $result=$this->userCart
            ->alias('a')
            ->join('article b','a.goods_id=b.id')
            ->where('a.user_id',$this->id)
            ->where('a.is_buy',1)
            ->field('b.jmoney,a.goods_id')
            ->select();

        $order_number=time().mt_rand(10000,99999);

        foreach($result as $k=>$v){

            $order[$k]['goods_id']=$v['goods_id'];

            $order[$k]['money']=$v['jmoney'];
            //用户id
            $order[$k]['user_id']=$this->id;
            //地址id
            $order[$k]['address_id']=$id;
            //生成15位订单号
            $order[$k]['order_number']=$order_number;
        }
        $this->userOrder->saveAll($order);
        //TODO 发起微信扫码支付
        $payUrl='http://pay.zhuoyujie.com/example/native.php';
        //这次购买的金额
//        $money=$this->isBuyMoney();
//        $money=intval($money)*100;

        $conf['body']='琢玉界商品';
        $conf['attach']='深圳分店';
        $conf['out_trade_no']=$order_number;
        // 总金额，单位分
        $conf['total_fee']='1';


        $imgUrl=$this->curl_get_https($payUrl,$conf);
//        dump($imgUrl);die;
        $this->assign('imgUrl',$imgUrl);

        return $this->fetch('pay');
    }
    //使用post
    function curl_get_https($url,$post_data){
        //初始化
        $curl = curl_init();
        //设置抓取的url
        curl_setopt($curl, CURLOPT_URL, $url);
        //设置获取的信息以文件流的形式返回，而不是直接输出。
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        //设置post方式提交
        curl_setopt($curl, CURLOPT_POST, 1);
        //设置post数据

        curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);
        //执行命令
        $data = curl_exec($curl);
        //关闭URL请求
        curl_close($curl);
        //显示获得的数据
       return $data;
    }
    //下单时，保存签名
    public function saveSign($sign,$order_number){
        $this->userOrder->where('order_number',$order_number)->setField('sign',$sign);

    }
    //支付完成后，回调通知
    public function  notify($order,$sign,$money){
        $res=$this->userOrder->where('order_number',$order)->field('sign,money')->find();

        if($res['sign']===$sign && intval($res['money'])*100===$money){
            //订单成功,处理界面显示
            return "SUCCESS";
        }else{
            //订单有问题
            return 'FAIL';
        }
    }
}